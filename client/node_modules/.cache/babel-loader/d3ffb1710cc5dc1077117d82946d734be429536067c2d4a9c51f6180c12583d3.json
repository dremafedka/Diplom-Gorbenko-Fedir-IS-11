{"ast":null,"code":"const API_BASE_URL = 'http://localhost:8000';\nexport const registerUser = async payload => {\n  const res = await fetch(`${API_BASE_URL}/register`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(payload)\n  });\n  if (!res.ok) {\n    const errorData = await res.json();\n    throw new Error(errorData.detail || 'Помилка при реєстрації');\n  }\n  return res.json();\n};\nexport const loginUser = async credentials => {\n  const res = await fetch(`${API_BASE_URL}/login`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(credentials)\n  });\n  if (!res.ok) {\n    const errorData = await res.json();\n    throw new Error(errorData.detail || 'Помилка авторизації');\n  }\n  return res.json();\n};\nexport const createTraining = async trainingData => {\n  const res = await fetch(`${API_BASE_URL}/create-training`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(trainingData)\n  });\n  if (!res.ok) {\n    const errorData = await res.json();\n    if (Array.isArray(errorData.detail)) {\n      const errorObj = {};\n      errorData.detail.forEach(e => {\n        // Останній елемент шляху (e.loc) — це ім'я поля\n        const field = e.loc[e.loc.length - 1];\n        // Видаляємо префікс \"Value error,\" (без врахування регістру)\n        const message = e.msg.replace(/^Value error,\\s*/i, '');\n        errorObj[field] = errorObj[field] ? errorObj[field] + ', ' + message : message;\n      });\n      throw errorObj;\n    } else if (typeof errorData.detail === 'string') {\n      throw {\n        general: errorData.detail\n      };\n    }\n    throw {\n      general: 'Помилка створення тренування'\n    };\n  }\n  return res.json();\n};","map":{"version":3,"names":["API_BASE_URL","registerUser","payload","res","fetch","method","headers","body","JSON","stringify","ok","errorData","json","Error","detail","loginUser","credentials","createTraining","trainingData","Array","isArray","errorObj","forEach","e","field","loc","length","message","msg","replace","general"],"sources":["D:/ProjectD/client/src/services/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8000';\r\n\r\nexport const registerUser = async (payload) => {\r\n  const res = await fetch(`${API_BASE_URL}/register`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(payload)\r\n  });\r\n  if (!res.ok) {\r\n    const errorData = await res.json();\r\n    throw new Error(errorData.detail || 'Помилка при реєстрації');\r\n  }\r\n  return res.json();\r\n};\r\n\r\nexport const loginUser = async (credentials) => {\r\n  const res = await fetch(`${API_BASE_URL}/login`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(credentials)\r\n  });\r\n  if (!res.ok) {\r\n    const errorData = await res.json();\r\n    throw new Error(errorData.detail || 'Помилка авторизації');\r\n  }\r\n  return res.json();\r\n};\r\n\r\nexport const createTraining = async (trainingData) => {\r\n  const res = await fetch(`${API_BASE_URL}/create-training`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(trainingData)\r\n  });\r\n  if (!res.ok) {\r\n    const errorData = await res.json();\r\n    if (Array.isArray(errorData.detail)) {\r\n      const errorObj = {};\r\n      errorData.detail.forEach(e => {\r\n         // Останній елемент шляху (e.loc) — це ім'я поля\r\n         const field = e.loc[e.loc.length - 1];\r\n         // Видаляємо префікс \"Value error,\" (без врахування регістру)\r\n         const message = e.msg.replace(/^Value error,\\s*/i, '');\r\n         errorObj[field] = errorObj[field] ? errorObj[field] + ', ' + message : message;\r\n      });\r\n      throw errorObj;\r\n    } else if (typeof errorData.detail === 'string') {\r\n      throw { general: errorData.detail };\r\n    }\r\n    throw { general: 'Помилка створення тренування' };\r\n  }\r\n  return res.json();\r\n};\r\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,uBAAuB;AAE5C,OAAO,MAAMC,YAAY,GAAG,MAAOC,OAAO,IAAK;EAC7C,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,WAAW,EAAE;IAClDK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,OAAO;EAC9B,CAAC,CAAC;EACF,IAAI,CAACC,GAAG,CAACO,EAAE,EAAE;IACX,MAAMC,SAAS,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,CAAC;IAClC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,MAAM,IAAI,wBAAwB,CAAC;EAC/D;EACA,OAAOX,GAAG,CAACS,IAAI,CAAC,CAAC;AACnB,CAAC;AAED,OAAO,MAAMG,SAAS,GAAG,MAAOC,WAAW,IAAK;EAC9C,MAAMb,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,QAAQ,EAAE;IAC/CK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACO,WAAW;EAClC,CAAC,CAAC;EACF,IAAI,CAACb,GAAG,CAACO,EAAE,EAAE;IACX,MAAMC,SAAS,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,CAAC;IAClC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,MAAM,IAAI,qBAAqB,CAAC;EAC5D;EACA,OAAOX,GAAG,CAACS,IAAI,CAAC,CAAC;AACnB,CAAC;AAED,OAAO,MAAMK,cAAc,GAAG,MAAOC,YAAY,IAAK;EACpD,MAAMf,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGJ,YAAY,kBAAkB,EAAE;IACzDK,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACS,YAAY;EACnC,CAAC,CAAC;EACF,IAAI,CAACf,GAAG,CAACO,EAAE,EAAE;IACX,MAAMC,SAAS,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,CAAC;IAClC,IAAIO,KAAK,CAACC,OAAO,CAACT,SAAS,CAACG,MAAM,CAAC,EAAE;MACnC,MAAMO,QAAQ,GAAG,CAAC,CAAC;MACnBV,SAAS,CAACG,MAAM,CAACQ,OAAO,CAACC,CAAC,IAAI;QAC3B;QACA,MAAMC,KAAK,GAAGD,CAAC,CAACE,GAAG,CAACF,CAAC,CAACE,GAAG,CAACC,MAAM,GAAG,CAAC,CAAC;QACrC;QACA,MAAMC,OAAO,GAAGJ,CAAC,CAACK,GAAG,CAACC,OAAO,CAAC,mBAAmB,EAAE,EAAE,CAAC;QACtDR,QAAQ,CAACG,KAAK,CAAC,GAAGH,QAAQ,CAACG,KAAK,CAAC,GAAGH,QAAQ,CAACG,KAAK,CAAC,GAAG,IAAI,GAAGG,OAAO,GAAGA,OAAO;MACjF,CAAC,CAAC;MACF,MAAMN,QAAQ;IAChB,CAAC,MAAM,IAAI,OAAOV,SAAS,CAACG,MAAM,KAAK,QAAQ,EAAE;MAC/C,MAAM;QAAEgB,OAAO,EAAEnB,SAAS,CAACG;MAAO,CAAC;IACrC;IACA,MAAM;MAAEgB,OAAO,EAAE;IAA+B,CAAC;EACnD;EACA,OAAO3B,GAAG,CAACS,IAAI,CAAC,CAAC;AACnB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}