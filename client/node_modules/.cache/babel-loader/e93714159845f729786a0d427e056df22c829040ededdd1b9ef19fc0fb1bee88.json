{"ast":null,"code":"// src/services/api.js\n\nexport const API_BASE_URL = 'http://localhost:8000';\n\n/**\r\n * Helper to check fetch Response and throw Error with detail or default message.\r\n */\nasync function checkResponse(res, defaultMsg) {\n  if (!res.ok) {\n    const errorData = await res.json();\n    throw new Error(errorData.detail || defaultMsg);\n  }\n  return res.json();\n}\n\n// — РЕЄСТРАЦІЯ / ЛОГІН —\nexport const registerUser = payload => fetch(`${API_BASE_URL}/register`, {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify(payload)\n}).then(res => checkResponse(res, 'Помилка при реєстрації'));\nexport const loginUser = credentials => fetch(`${API_BASE_URL}/login`, {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify(credentials)\n}).then(res => checkResponse(res, 'Помилка авторизації'));\n\n// — ОТРИМАННЯ ВСІХ ТРЕНУВАНЬ (ПУБЛІЧНИЙ КАТАЛОГ) —\n// додаємо avatar_url, якщо є\nexport const getTrainings = async () => {\n  const res = await fetch(`${API_BASE_URL}/trainings`);\n  const data = await checkResponse(res, 'Помилка отримання тренувань');\n  data.trainings = data.trainings.map(t => ({\n    ...t,\n    avatar_url: t.avatar_url ? `${API_BASE_URL}${t.avatar_url}` : ''\n  }));\n  return data;\n};\n\n// — ОТРИМАННЯ ЗАПИСАНИХ ТРЕНУВАНЬ СПОРТСМЕНА —\n// додаємо avatar_url\nexport const getAthleteTrainings = async athleteId => {\n  const res = await fetch(`${API_BASE_URL}/athlete/trainings?athlete_id=${encodeURIComponent(athleteId)}`);\n  const data = await checkResponse(res, 'Помилка отримання тренувань спортсмена');\n  data.trainings = data.trainings.map(t => ({\n    ...t,\n    avatar_url: t.avatar_url ? `${API_BASE_URL}${t.avatar_url}` : ''\n  }));\n  return data;\n};\n\n// — ЗАПИСАТИСЬ / СКАСУВАТИ ЗАПИС —\nexport const signupForTraining = (trainingId, athleteId) => fetch(`${API_BASE_URL}/trainings/${trainingId}/signup`, {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    athlete_id: athleteId\n  })\n}).then(res => checkResponse(res, 'Помилка запису на тренування'));\nexport const cancelEnrollment = (trainingId, athleteId) => fetch(`${API_BASE_URL}/trainings/${trainingId}/cancel`, {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    athlete_id: athleteId\n  })\n}).then(res => checkResponse(res, 'Помилка скасування запису'));\n\n// — СТВОРЕННЯ ТРЕНУВАННЯ —\nexport const createTraining = trainingData => fetch(`${API_BASE_URL}/create-training`, {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify(trainingData)\n}).then(res => checkResponse(res, 'Помилка створення тренування'));\n\n// — ТРЕНУВАННЯ ТРЕНЕРА —\nexport const getCoachTrainings = coachId => fetch(`${API_BASE_URL}/coach/trainings?coach_id=${encodeURIComponent(coachId)}`).then(res => checkResponse(res, 'Помилка отримання тренувань'));\n\n// — УЧАСНИКИ ТРЕНУВАННЯ —\nexport const getTrainingParticipants = trainingId => fetch(`${API_BASE_URL}/trainings/${trainingId}/participants`).then(res => checkResponse(res, 'Помилка отримання учасників'));\n\n// — ОНОВЛЕННЯ ТРЕНУВАННЯ —\nexport const updateTraining = (trainingId, updateData) => fetch(`${API_BASE_URL}/trainings/${trainingId}`, {\n  method: 'PUT',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify(updateData)\n}).then(res => checkResponse(res, 'Помилка оновлення тренування'));\n\n// — ПРОФІЛЬ ТРЕНЕРА —\nexport const getCoachProfile = coachId => fetch(`${API_BASE_URL}/coach/profile?coach_id=${encodeURIComponent(coachId)}`).then(res => checkResponse(res, 'Помилка завантаження профілю'));\nexport const updateCoachProfile = payload => fetch(`${API_BASE_URL}/coach/profile`, {\n  method: 'PUT',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify(payload)\n}).then(res => checkResponse(res, 'Помилка оновлення профілю'));\nexport const changeCoachPassword = payload => fetch(`${API_BASE_URL}/coach/change-password`, {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify(payload)\n}).then(res => checkResponse(res, 'Помилка зміни пароля'));\n\n// — ЗАВАНТАЖЕННЯ АВАТАРКИ —\nexport const uploadCoachAvatar = (userId, file) => {\n  const formData = new FormData();\n  formData.append('file', file);\n  return fetch(`${API_BASE_URL}/coach/avatar?user_id=${encodeURIComponent(userId)}`, {\n    method: 'POST',\n    body: formData\n  }).then(res => checkResponse(res, 'Помилка завантаження аватарки')).then(json => ({\n    avatar_url: `${API_BASE_URL}${json.avatar_url}`\n  }));\n};","map":{"version":3,"names":["API_BASE_URL","checkResponse","res","defaultMsg","ok","errorData","json","Error","detail","registerUser","payload","fetch","method","headers","body","JSON","stringify","then","loginUser","credentials","getTrainings","data","trainings","map","t","avatar_url","getAthleteTrainings","athleteId","encodeURIComponent","signupForTraining","trainingId","athlete_id","cancelEnrollment","createTraining","trainingData","getCoachTrainings","coachId","getTrainingParticipants","updateTraining","updateData","getCoachProfile","updateCoachProfile","changeCoachPassword","uploadCoachAvatar","userId","file","formData","FormData","append"],"sources":["D:/ProjectD/client/src/services/api.js"],"sourcesContent":["// src/services/api.js\r\n\r\nexport const API_BASE_URL = 'http://localhost:8000';\r\n\r\n/**\r\n * Helper to check fetch Response and throw Error with detail or default message.\r\n */\r\nasync function checkResponse(res, defaultMsg) {\r\n  if (!res.ok) {\r\n    const errorData = await res.json();\r\n    throw new Error(errorData.detail || defaultMsg);\r\n  }\r\n  return res.json();\r\n}\r\n\r\n// — РЕЄСТРАЦІЯ / ЛОГІН —\r\nexport const registerUser = payload =>\r\n  fetch(`${API_BASE_URL}/register`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(payload)\r\n  }).then(res => checkResponse(res, 'Помилка при реєстрації'));\r\n\r\nexport const loginUser = credentials =>\r\n  fetch(`${API_BASE_URL}/login`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(credentials)\r\n  }).then(res => checkResponse(res, 'Помилка авторизації'));\r\n\r\n// — ОТРИМАННЯ ВСІХ ТРЕНУВАНЬ (ПУБЛІЧНИЙ КАТАЛОГ) —\r\n// додаємо avatar_url, якщо є\r\nexport const getTrainings = async () => {\r\n  const res = await fetch(`${API_BASE_URL}/trainings`);\r\n  const data = await checkResponse(res, 'Помилка отримання тренувань');\r\n  data.trainings = data.trainings.map(t => ({\r\n    ...t,\r\n    avatar_url: t.avatar_url\r\n      ? `${API_BASE_URL}${t.avatar_url}`\r\n      : ''\r\n  }));\r\n  return data;\r\n};\r\n\r\n// — ОТРИМАННЯ ЗАПИСАНИХ ТРЕНУВАНЬ СПОРТСМЕНА —\r\n// додаємо avatar_url\r\nexport const getAthleteTrainings = async athleteId => {\r\n  const res = await fetch(\r\n    `${API_BASE_URL}/athlete/trainings?athlete_id=${encodeURIComponent(athleteId)}`\r\n  );\r\n  const data = await checkResponse(res, 'Помилка отримання тренувань спортсмена');\r\n  data.trainings = data.trainings.map(t => ({\r\n    ...t,\r\n    avatar_url: t.avatar_url\r\n      ? `${API_BASE_URL}${t.avatar_url}`\r\n      : ''\r\n  }));\r\n  return data;\r\n};\r\n\r\n// — ЗАПИСАТИСЬ / СКАСУВАТИ ЗАПИС —\r\nexport const signupForTraining = (trainingId, athleteId) =>\r\n  fetch(`${API_BASE_URL}/trainings/${trainingId}/signup`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ athlete_id: athleteId })\r\n  }).then(res => checkResponse(res, 'Помилка запису на тренування'));\r\n\r\nexport const cancelEnrollment = (trainingId, athleteId) =>\r\n  fetch(`${API_BASE_URL}/trainings/${trainingId}/cancel`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ athlete_id: athleteId })\r\n  }).then(res => checkResponse(res, 'Помилка скасування запису'));\r\n\r\n// — СТВОРЕННЯ ТРЕНУВАННЯ —\r\nexport const createTraining = trainingData =>\r\n  fetch(`${API_BASE_URL}/create-training`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(trainingData)\r\n  }).then(res => checkResponse(res, 'Помилка створення тренування'));\r\n\r\n// — ТРЕНУВАННЯ ТРЕНЕРА —\r\nexport const getCoachTrainings = coachId =>\r\n  fetch(\r\n    `${API_BASE_URL}/coach/trainings?coach_id=${encodeURIComponent(coachId)}`\r\n  ).then(res => checkResponse(res, 'Помилка отримання тренувань'));\r\n\r\n// — УЧАСНИКИ ТРЕНУВАННЯ —\r\nexport const getTrainingParticipants = trainingId =>\r\n  fetch(`${API_BASE_URL}/trainings/${trainingId}/participants`).then(res =>\r\n    checkResponse(res, 'Помилка отримання учасників')\r\n  );\r\n\r\n// — ОНОВЛЕННЯ ТРЕНУВАННЯ —\r\nexport const updateTraining = (trainingId, updateData) =>\r\n  fetch(`${API_BASE_URL}/trainings/${trainingId}`, {\r\n    method: 'PUT',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(updateData)\r\n  }).then(res => checkResponse(res, 'Помилка оновлення тренування'));\r\n\r\n// — ПРОФІЛЬ ТРЕНЕРА —\r\nexport const getCoachProfile = coachId =>\r\n  fetch(\r\n    `${API_BASE_URL}/coach/profile?coach_id=${encodeURIComponent(coachId)}`\r\n  ).then(res => checkResponse(res, 'Помилка завантаження профілю'));\r\n\r\nexport const updateCoachProfile = payload =>\r\n  fetch(`${API_BASE_URL}/coach/profile`, {\r\n    method: 'PUT',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(payload)\r\n  }).then(res => checkResponse(res, 'Помилка оновлення профілю'));\r\n\r\nexport const changeCoachPassword = payload =>\r\n  fetch(`${API_BASE_URL}/coach/change-password`, {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify(payload)\r\n  }).then(res => checkResponse(res, 'Помилка зміни пароля'));\r\n\r\n// — ЗАВАНТАЖЕННЯ АВАТАРКИ —\r\nexport const uploadCoachAvatar = (userId, file) => {\r\n  const formData = new FormData();\r\n  formData.append('file', file);\r\n  return fetch(\r\n    `${API_BASE_URL}/coach/avatar?user_id=${encodeURIComponent(userId)}`,\r\n    {\r\n      method: 'POST',\r\n      body: formData\r\n    }\r\n  )\r\n    .then(res => checkResponse(res, 'Помилка завантаження аватарки'))\r\n    .then(json => ({\r\n      avatar_url: `${API_BASE_URL}${json.avatar_url}`\r\n    }));\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}